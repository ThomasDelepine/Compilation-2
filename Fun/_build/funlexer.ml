# 1 "funlexer.mll"
 

  open Lexing
  open Funparser

    let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "fun",   FUN;
        "let",   LET;
        "rec",   REC;
        "in",    IN;
        "if",    IF;
        "then",  THEN;
        "else",  ELSE;
        "true",  BOOL true;
        "false", BOOL false;
        "mod",   MOD;
        "not",   NOT;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s)
        

# 28 "funlexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\229\255\230\255\231\255\232\255\233\255\234\255\001\000\
    \001\000\003\000\005\000\245\255\246\255\248\255\249\255\006\000\
    \078\000\021\000\004\000\002\000\255\255\253\255\250\255\238\255\
    \244\255\240\255\242\255\243\255\237\255\236\255\039\000\252\255\
    \253\255\016\000\018\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\025\000\
    \025\000\014\000\016\000\255\255\255\255\255\255\255\255\008\000\
    \004\000\003\000\020\000\001\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
    \000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\020\000\019\000\000\000\019\000\000\000\019\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\019\000\000\000\000\000\000\000\008\000\028\000\
    \018\000\006\000\012\000\013\000\003\000\015\000\021\000\011\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\036\000\035\000\009\000\014\000\010\000\027\000\
    \025\000\026\000\023\000\024\000\022\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\033\000\
    \000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\005\000\000\000\004\000\000\000\016\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\007\000\029\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\016\000\000\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\019\000\255\255\000\000\255\255\019\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\019\000\255\255\255\255\255\255\000\000\008\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\033\000\034\000\000\000\000\000\000\000\009\000\
    \009\000\009\000\010\000\010\000\015\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\030\000\
    \255\255\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\007\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\016\000\255\255\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 34 "funlexer.mll"
      ( new_line lexbuf; token lexbuf )
# 155 "funlexer.ml"

  | 1 ->
# 36 "funlexer.mll"
      ( token lexbuf )
# 160 "funlexer.ml"

  | 2 ->
# 38 "funlexer.mll"
      ( comment lexbuf; token lexbuf )
# 165 "funlexer.ml"

  | 3 ->
let
# 39 "funlexer.mll"
              n
# 171 "funlexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 40 "funlexer.mll"
      ( CST(int_of_string n) )
# 175 "funlexer.ml"

  | 4 ->
let
# 41 "funlexer.mll"
             id
# 181 "funlexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 42 "funlexer.mll"
      ( keyword_or_ident id )
# 185 "funlexer.ml"

  | 5 ->
# 44 "funlexer.mll"
      ( ARROW )
# 190 "funlexer.ml"

  | 6 ->
# 46 "funlexer.mll"
      ( EQ )
# 195 "funlexer.ml"

  | 7 ->
# 48 "funlexer.mll"
      ( PLUS )
# 200 "funlexer.ml"

  | 8 ->
# 50 "funlexer.mll"
      ( MINUS )
# 205 "funlexer.ml"

  | 9 ->
# 52 "funlexer.mll"
      ( STAR )
# 210 "funlexer.ml"

  | 10 ->
# 54 "funlexer.mll"
      ( SLASH )
# 215 "funlexer.ml"

  | 11 ->
# 56 "funlexer.mll"
      ( LSR )
# 220 "funlexer.ml"

  | 12 ->
# 58 "funlexer.mll"
      ( LSL )
# 225 "funlexer.ml"

  | 13 ->
# 60 "funlexer.mll"
      ( NEQ )
# 230 "funlexer.ml"

  | 14 ->
# 62 "funlexer.mll"
      ( LT )
# 235 "funlexer.ml"

  | 15 ->
# 64 "funlexer.mll"
      ( LE )
# 240 "funlexer.ml"

  | 16 ->
# 66 "funlexer.mll"
      ( GT )
# 245 "funlexer.ml"

  | 17 ->
# 68 "funlexer.mll"
      ( GE )
# 250 "funlexer.ml"

  | 18 ->
# 70 "funlexer.mll"
      ( AND )
# 255 "funlexer.ml"

  | 19 ->
# 72 "funlexer.mll"
      ( OR )
# 260 "funlexer.ml"

  | 20 ->
# 74 "funlexer.mll"
      ( LPAR )
# 265 "funlexer.ml"

  | 21 ->
# 76 "funlexer.mll"
      ( RPAR )
# 270 "funlexer.ml"

  | 22 ->
# 78 "funlexer.mll"
      ( LBRACKET )
# 275 "funlexer.ml"

  | 23 ->
# 80 "funlexer.mll"
      ( RBRACKET )
# 280 "funlexer.ml"

  | 24 ->
# 82 "funlexer.mll"
      ( COMMA )
# 285 "funlexer.ml"

  | 25 ->
# 84 "funlexer.mll"
      ( failwith ("Unknown character : " ^ (lexeme lexbuf)) )
# 290 "funlexer.ml"

  | 26 ->
# 86 "funlexer.mll"
      ( EOF )
# 295 "funlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 30
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 90 "funlexer.mll"
      ( () )
# 307 "funlexer.ml"

  | 1 ->
# 92 "funlexer.mll"
      ( comment lexbuf; comment lexbuf )
# 312 "funlexer.ml"

  | 2 ->
# 94 "funlexer.mll"
      ( comment lexbuf )
# 317 "funlexer.ml"

  | 3 ->
# 96 "funlexer.mll"
      ( failwith "unfinished comment" )
# 322 "funlexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

